#!/bin/bash

# update pci.ids from local source
if [[ -e $PCIIDS && $PCIIDS -nt /usr/share/misc/pci.ids ]]; then
        cp -f /usr/share/misc/pci.ids /usr/share/misc/pci.ids.old
        cp -f $PCIIDS /usr/share/misc/pci.ids
fi

## 兼容 WSL 环境
if [[ -d /usr/lib/wsl/lib ]] && [[ ":$PATH:" != *":/usr/lib/wsl/lib:"* ]]; then
    export PATH="/usr/lib/wsl/lib:$PATH"
fi

mkdir -p /run/os/
mkdir -p  /run/hive/

# 定义要查询的字段
declare -A QUERY_FIELDS=(
    # ["name"]="name"
    ["uuid"]="gpu_uuid"
    # ["busid"]="pci.bus_id"
    ["fan_speed_cur"]="fan.speed"
    ["temp"]="temperature.gpu"
    ["mtemp"]="temperature.memory"
    ["plim_def"]="power.default_limit"
    ["plim_min"]="power.min_limit"
    ["plim_max"]="power.max_limit"
    ["plim_cur"]="power.limit"
    ["power_cur"]="power.draw"
    ["mem"]="memory.total"
    ["usedmem"]="memory.used"
    ["freemem"]="memory.free"
    ["cload"]="utilization.gpu"
    ["mload"]="utilization.memory"
    ["clocks_mem_cur"]="clocks.current.memory"
    # ["clocks_max_memory"]="clocks.max.memory"
    ["clocks_gpu_cur"]="clocks.sm"
    ["clocks_mem"]="clocks.mem"
    ["vbios"]="vbios_version"
)

# 初始化 JSON 数组
JSON_ARRAY="["

# 检查是否存在 nvtool
USE_NVTOOL=0
if command -v nvtool >/dev/null 2>&1; then
    USE_NVTOOL=1
fi

# 获取所有 GPU 的 ID 列表
# 获取 Nvidia 显卡数量
GPU_COUNT=$(/os/bin/gpu-count NVIDIA)
if [[ ${GPU_COUNT} -eq 0 ]]; then
    echo "没有显卡"
    echo "[]"
    exit 0
fi

# 遍历每个 GPU
# for GPU_ID in $GPU_IDS; do
GPU_ID=0
while true
do
    # 初始化单个 GPU 的 JSON 对象
    JSON_OBJECT="{"
   
    # 获取 `busid`（用于查询 subvendor），失败时设为空字符串
    busid_tmp=$(nvidia-smi --id="$GPU_ID" --query-gpu=pci.bus_id --format=csv,noheader,nounits 2>/dev/null | xargs || echo "")

    ## 跳过报错的显卡
    if [[ $busid_tmp =~ "NVIDIA-SMI has failed because it" ]]; then
        GPU_ID=$(expr $GPU_ID + 1)
        echo "报错了，busid_tmp = $busid_tmp"
        [[ ${GPU_ID} -ge ${GPU_COUNT} ]] && break
        continue
    fi

    ## 兼容 https://www.gpushare.com，跳过空显卡
    if [[ $busid_tmp == "No devices were found" ]]; then
        GPU_ID=$(expr $GPU_ID + 1)
        echo "busid_tmp = ${busid_tmp}, GPU_ID = ${GPU_ID}"
        echo "报错了，busid_tmp = $busid_tmp"
        [[ ${GPU_ID} -ge ${GPU_COUNT} ]] && break
        continue
    fi


    busid_tmp="${busid_tmp:-""}"
    if [[ $busid_tmp =~ "Unknown Error" ]]; then
        busid_tmp=$(echo "$busid_tmp" | awk '{print $8}')
        busid_tmp=${busid_tmp#GPU0000:}  # 去掉前缀 GPU0000:
        busid_tmp=${busid_tmp%:} # 去掉最后的冒号
        JSON_OBJECT+="\"vbios\":\"MALFUNCTION\","
    else
        busid_tmp=${busid_tmp#00000000:}
    fi
    JSON_OBJECT+="\"busid\":\"$busid_tmp\","


    ## 获取显卡名称
    if [[ $(systemd-detect-virt) == "wsl" ]]; then  ## 兼容 WSL 环境
			name=$(nvidia-smi -i ${GPU_ID} --query-gpu=name --format=csv,noheader,nounits)
		else
            name=`lspci -vmms "$busid_tmp" 2>/dev/null | grep "Device:" | grep -v 'SDevice' | awk -F ':' '{print $NF}'`
	fi
    [[ "$name" =~ CMP ]] && name="GeForce $name"
    name=$(echo "$name" | tr -d ":")
    name="${name#"${name%%[![:space:]]*}"}"
    JSON_OBJECT+="\"name\":\"$name\","


    # 获取 `subvendor`，失败时设为空字符串
    subvendor=$(lspci -vmms "$busid_tmp" 2>/dev/null | grep -oP "SVendor:\s\K.*" || echo "")
    subvendor="${subvendor:-""}"

    # 添加 `subvendor` 到 JSON 对象
    JSON_OBJECT+="\"subvendor\":\"$subvendor\","
    
    ## brand
    JSON_OBJECT+="\"brand\":\"nvidia\","


 # 遍历查询字段
    for key in "${!QUERY_FIELDS[@]}"; do
        # 查询对应的字段，失败时返回空字符串
        value=$(nvidia-smi --id="$GPU_ID" --query-gpu=${QUERY_FIELDS[$key]} --format=csv,noheader,nounits 2>/dev/null | xargs || echo "")

        # 如果字段没有值，则设为空字符串
        value="${value:-""}"

        if [[ $value =~ "Unknown Error" ]]; then
            if [[ $key == "vbios" ]]; then
                value="MALFUNCTION"
            else
                value=""
            fi
            continue
        fi

        # 拼接为 JSON 格式
        JSON_OBJECT+="\"$key\":\"$value\","
    done

    # 去掉多余的逗号并关闭 JSON 对象
    JSON_OBJECT=${JSON_OBJECT%,}
    JSON_OBJECT+="},"

    # 添加到 JSON 数组
    JSON_ARRAY+="$JSON_OBJECT"

    ## 每次循环 GPU ID + 1
    GPU_ID=$(expr $GPU_ID + 1)
    ## 达到最大值后停止
    [[ ${GPU_ID} -ge ${GPU_COUNT} ]] && break
done

# 去掉最后一个逗号并关闭 JSON 数组
JSON_ARRAY=${JSON_ARRAY%,}
JSON_ARRAY+="]"

# 输出 JSON 数组格式
echo "$JSON_ARRAY" | tr -d '\t' > /run/os/nvidia-json
echo "$JSON_ARRAY" | tr -d '\t' 

