#!/usr/bin/env bash
# Usage: nvidia-oc delay|log|stop|reset|nocolor|quiet


# 定义JSON文件路径
# JSON_FILE="/os/config/oc-nvidia.json"
source /os/bin/colors
WALLET_CONF=$1
## 没有指定钱包文件，退出
[[ -z ${WALLET_CONF} ]] && echoRed "Wallet config file not specified" && exit 1
[[ ! -f ${WALLET_CONF} ]] && echoRed "Wallet config file not found: ${WALLET_CONF}" && exit 1
source ${WALLET_CONF}
unset CUDA_VISIBLE_DEVICES
NVML_TIMEOUT=10

[[ -f /os/bin/colors ]] && source /os/bin/colors
# [[ -f /hive/bin/colors ]] && source /hive/bin/colors

## 如果 GPU 数量为 0，退出
n=`/os/bin/gpu-count NVIDIA`
if [[ $n -eq 0 ]]; then
    echoRed "No NVIDIA GPU detected"
    exit 0
fi


## 判断是否有 nvtool 命令，如果没有则跳过某些参数的设置
if command -v nvtool &>/dev/null; then
    ## 获取 GPU 信息
    gpu_detect_json=`gpu-check listjson NVIDIA`
else
    echoYellow "nvtool not found, skipping setting GPU sommething"
    gpu_detect_json=$(nvidia-json)
fi


## 应用超频
apply_nvml() {
    local args="$1"
    local exitcode
    local result
    [[ -z "$args" ]] && return 0

    ## 如果有 py-nvtool.py，使用它
    if [[ -f /os/bin/py-nvtool.py ]]; then
        shell="/os/bin/py-nvtool.py $args"
    fi

    ## 如果有 nvtool，使用 hive nvtool
    if command -v nvtool >/dev/null 2>&1; then
        shell="/hive/sbin/nvtool -q --nodev $args"
    fi


    # echo "$shell"
    result=`timeout --foreground -s9 $NVML_TIMEOUT $shell`
    exitcode=$?
    if [[ $exitcode -eq 0 ]]; then
        [[ "$result" =~ "was already set" ]] && echo "$result" || echoCyan "$result"
    else
        ## 超频失败，输出结果 & 发送告警
        [[ ! -z "$result" ]] && echoRed "$result" && say-message error "Failed to apply NVIDIA OC: $result"
        [[ $exitcode -ge 124 ]] && echoRed "nvtool failed by timeout (exitcode=$exitcode)" && say-message error "nvtool failed by timeout (exitcode=$exitcode)"
    fi
    return $exitcode
}

## 使用 nvidia-smi 超频
apply_nvidia_smi() {
    local args="$1"
    local exitcode
    local result
    [[ -z "$args" ]] && return 0
    shell="/usr/bin/nvidia-smi $args"
    # echo "$shell"
    result=`timeout --foreground -s9 $NVML_TIMEOUT $shell`
    exitcode=$?
    if [[ $exitcode -eq 0 ]]; then
        [[ "$result" =~ "All done" ]] && echo "$result" || echoCyan "$result"
    else
        ## 超频失败，输出结果 & 发送告警
        [[ ! -z "$result" ]] && echoRed "$result" && say-message error "Failed to apply NVIDIA OC: $result"
        [[ $exitcode -ge 124 ]] && echoRed "nvidia-smi failed by timeout (exitcode=$exitcode)" && say-message error "nvidia-smi failed by timeout (exitcode=$exitcode)"
    fi
    return $exitcode
}

## 处理JSON配置文件
handle_oc_config() {
    tag=$1

    if [[ -z ${tag} ]] || [[ ${tag} == "" ]]; then
        echo "需要指定 handle_oc_config 参数"
        exit 1
    fi

    # 获取数组长度  
    gpu_count=$(echo "$gpu_detect_json" | jq '. | length')
    echoCyan "Detected $gpu_count NVIDIA cards"


    # 遍历每个GPU的配置
    for ((i=0; i<$gpu_count; i++)); do
         
        name=$(echo "$gpu_detect_json" |jq -r ".[$i].name")
        BUSID=$(echo "$gpu_detect_json" |jq -r ".[$i].busid")
        PLMIN=$(echo "$gpu_detect_json" |jq -r ".[$i].plim_min")
        PLDEF=$(echo "$gpu_detect_json" |jq -r ".[$i].plim_def")
        PLMAX=$(echo "$gpu_detect_json" |jq -r ".[$i].plim_max")
        RAM=$(echo "$gpu_detect_json" |jq -r ".[$i].mem")
        vbios=$(echo "$gpu_detect_json" |jq -r ".[$i].vbios")

        if [[ ${tag} == "apply_set" ]]; then
            echo "${YELLOW}===${NOCOLOR} GPU ${CYAN}$i${NOCOLOR}, ${PURPLE}${BUSID} ${GREEN}$name ${WHITE}${RAM} MB${NOCOLOR}, PL: ${PLMIN}, ${PLDEF}, ${PLMAX} ${YELLOW}=== $(date +%T)${NOCOLOR}"
        fi

        ## 获取参数
        item=$(echo "$OC" | jq ".[$i]")
        ## 提取每个对象中的值
        setcoreoffset=$(echo "$item" | jq -r '.setcoreoffset')
        setmemoffset=$(echo "$item" | jq -r '.setmemoffset')
        setclocks=$(echo "$item" | jq -r '.setclocks')
        setmem=$(echo "$item" | jq -r '.setmem')
        setpl=$(echo "$item" | jq -r '.setpl')
        setfan=$(echo "$item" | jq -r '.setfan')

        ##########################################################################################
        ## 判断参数是否合法
        ##########################################################################################
        if [[ ! "$setcoreoffset" =~ ^[0-9]+$ ]]; then
            setcoreoffset=0
        fi

        if [[ ! "$setmemoffset" =~ ^-?[0-9]+$ ]]; then
            setmemoffset=0
        fi

        if [[ ! "$setclocks" =~ ^[0-9]+$ ]]; then
            setclocks=0
        fi

        if [[ ! "$setmem" =~ ^[0-9]+$ ]]; then
            setmem=0
        fi

        if [[ ! "$setfan" =~ ^[0-9]+$ ]]; then
            setfan=0
        fi

        if [[ ! "$setpl" =~ ^[0-9]+$ ]]; then
            setpl=0
        fi
        if (( $(echo "$setpl > $PLMAX" | bc -l) )) || (( $(echo "$setpl < $PLMIN" | bc -l) )); then
            setpl=${PLDEF}
        fi

        # ## 处理 USE_GPUS
        skipp_this="false"
        if [[ ! -z ${USE_GPUS} ]] && ! echo "$USE_GPUS" | grep -q -w "$i"; then
            echo "GPU $i is not in USE_GPUS, skipping"
            skipp_this="true"
        fi

        ##########################################################################################
        ## 判断是否有 nvtool 命令，如果没有则跳过某些参数的设置
        ##########################################################################################
        ## 设置功率 - 使用 nvidia-smi 设置功耗，不使用 nvtool
        if [[ ${tag} == "apply_set" ]] && [[ ${vbios} != "MALFUNCTION" ]] && [[ ${skipp_this} == "false" ]]; then
            nvidia-smi -i $i -pm 1
            apply_nvidia_smi "-i $i -pl ${setpl}" || exitcode=$?
        fi

        ## 如果存在 nvtool 命令，则设置其他参数
        if command -v nvtool &>/dev/null; then
            if [[ ${tag} == "apply_hive" ]]; then
                ## 拼接 HiveOS 用参数
                [[ -z "$CLOCK" ]] && CLOCK="${setcoreoffset}" || CLOCK="${CLOCK} ${setcoreoffset}"
                [[ -z "$MEM" ]] && MEM="${setmemoffset}" || MEM="${MEM} ${setmemoffset}"
                [[ -z "$LCLOCK" ]] && LCLOCK="${setclocks}" || LCLOCK="${LCLOCK} ${setclocks}"
                [[ -z "$LMEM" ]] && LMEM="${setmem}" || LMEM="${LMEM} ${setmem}"
                [[ -z "$FAN" ]] && FAN="${setfan}" || FAN="${FAN} ${setfan}"
                [[ -z "$PLIMIT" ]] && PLIMIT="${setpl}" || PLIMIT="${PLIMIT} ${setpl}"
            fi

            ## 执行超频操作
            if [[ ${tag} == "apply_set" ]] && [[ ${vbios} != "MALFUNCTION" ]] && [[ ${skipp_this} == "false" ]]; then
                apply_nvml "-i $i --setcoreoffset $setcoreoffset" || exitcode=$?
                apply_nvml "-i $i --setmemoffset $setmemoffset" || exitcode=$?
                apply_nvml "-i $i --setclocks $setclocks" || exitcode=$?
                apply_nvml "-i $i --setmem $setmem" || exitcode=$?
                apply_nvml "-i $i --setfan $setfan" || exitcode=$?
            fi
        fi
    done

    ## 执行超频操作之前先覆盖 hiveos 配置
    if command -v nvtool &>/dev/null; then
        if [[ ${tag} == "apply_hive" ]]; then
            [[ ! -f /hive-config/nvidia-oc.conf ]] && touch /hive-config/nvidia-oc.conf
            # 先清空这些特定的配置行，避免重复追加
            sed -i '/^CLOCK=/d; /^MEM=/d; /^LCLOCK=/d; /^LMEM=/d; /^FAN=/d; /^PLIMIT=/d' /hive-config/nvidia-oc.conf

            # 然后追加新的配置
            printf "CLOCK=\"%s\"\n" "$CLOCK" >> /hive-config/nvidia-oc.conf
            printf "MEM=\"%s\"\n" "$MEM" >> /hive-config/nvidia-oc.conf
            printf "LCLOCK=\"%s\"\n" "$LCLOCK" >> /hive-config/nvidia-oc.conf
            printf "LMEM=\"%s\"\n" "$LMEM" >> /hive-config/nvidia-oc.conf
            printf "FAN=\"%s\"\n" "$FAN" >> /hive-config/nvidia-oc.conf
            printf "PLIMIT=\"%s\"\n" "$PLIMIT" >> /hive-config/nvidia-oc.conf

            ## 重新加载配置
            export NVIDIA_OC_CONF="/hive-config/nvidia-oc.conf"
            if [[ -z ${USE_GPUS} ]]; then
                /hive/sbin/nvidia-oc
            fi
        fi
    fi
}

## 先应用到 hiveos 配置文件
handle_oc_config apply_hive

## 然后执行超频操作
handle_oc_config apply_set
