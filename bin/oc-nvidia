#!/usr/bin/env bash
# Usage: nvidia-oc delay|log|stop|reset|nocolor|quiet


# 定义JSON文件路径
# JSON_FILE="/os/config/oc-nvidia.json"
WALLET_CONF=$1
source ${WALLET_CONF}
unset CUDA_VISIBLE_DEVICES
NVML_TIMEOUT=10

[[ -f /os/bin/colors ]] && source /os/bin/colors
# [[ -f /hive/bin/colors ]] && source /hive/bin/colors

## 如果 GPU 数量为 0，退出
n=`/os/bin/gpu-count NVIDIA`
if [[ $n -eq 0 ]]; then
	echo "No NVIDIA GPU detected"
	exit 0
fi


## 判断是否有 nvtool 命令，如果没有则跳过某些参数的设置
if command -v nvtool &>/dev/null; then
    ## 获取 GPU 信息
    gpu_detect_json=`gpu-check listjson NVIDIA`
else
    echoYellow "nvtool not found, skipping setting GPU $i sommething"
    gpu_detect_json=$(nvidia-json)
fi


## 应用超频
apply_nvml() {
    local args="$1"
    local exitcode
    local result
    [[ -z "$args" ]] && return 0
    shell="/hive/sbin/nvtool -q --nodev $args"
    # echo "$shell"
    result=`timeout --foreground -s9 $NVML_TIMEOUT $shell`
    exitcode=$?
    if [[ $exitcode -eq 0 ]]; then
        [[ "$result" =~ "was already set" ]] && echo "$result" || echoCyan "$result"
    else
        ## 超频失败，输出结果 & 发送告警
        [[ ! -z "$result" ]] && echoRed "$result" && say-message error "Failed to apply NVIDIA OC: $result"
        [[ $exitcode -ge 124 ]] && echoRed "nvtool failed by timeout (exitcode=$exitcode)" && say-message error "nvtool failed by timeout (exitcode=$exitcode)"
    fi
    return $exitcode
}

## 使用 nvidia-smi 超频
apply_nvidia_smi() {
    local args="$1"
    local exitcode
    local result
    [[ -z "$args" ]] && return 0
    shell="/usr/bin/nvidia-smi $args"
    # echo "$shell"
    result=`timeout --foreground -s9 $NVML_TIMEOUT $shell`
    exitcode=$?
    if [[ $exitcode -eq 0 ]]; then
        [[ "$result" =~ "All done" ]] && echo "$result" || echoCyan "$result"
    else
        ## 超频失败，输出结果 & 发送告警
        [[ ! -z "$result" ]] && echoRed "$result" && say-message error "Failed to apply NVIDIA OC: $result"
        [[ $exitcode -ge 124 ]] && echoRed "nvidia-smi failed by timeout (exitcode=$exitcode)" && say-message error "nvidia-smi failed by timeout (exitcode=$exitcode)"
    fi
    return $exitcode
}

## 处理JSON配置文件
handle_oc_config() {
    # 获取数组长度  
    gpu_count=$(echo "$gpu_detect_json" | jq '. | length')
    echoCyan "Detected $gpu_count NVIDIA cards"


    # 遍历每个GPU的配置
    for ((i=0; i<$gpu_count; i++)); do
        
        ## 处理 USE_GPUS
        if [[ ! -z ${USE_GPUS} ]] && [[ ${USE_GPUS} != "" ]]; then
            if [[ ! ${USE_GPUS} =~ $i ]]; then
                echoYellow "GPU $i is not in USE_GPUS, skipping"
                echo
                continue
            fi
        fi

        name=$(echo "$gpu_detect_json" |jq -r ".[$i].name")
        BUSID=$(echo "$gpu_detect_json" |jq -r ".[$i].busid")
        PLMIN=$(echo "$gpu_detect_json" |jq -r ".[$i].plim_min")
        PLDEF=$(echo "$gpu_detect_json" |jq -r ".[$i].plim_def")
        PLMAX=$(echo "$gpu_detect_json" |jq -r ".[$i].plim_max")
        RAM=$(echo "$gpu_detect_json" |jq -r ".[$i].mem")
        vbios=$(echo "$gpu_detect_json" |jq -r ".[$i].vbios")

        ## 跳过有问题的显卡
        [[ ${vbios} == "MALFUNCTION" ]] && continue

        echo "${YELLOW}===${NOCOLOR} GPU ${CYAN}$i${NOCOLOR}, ${PURPLE}${BUSID} ${GREEN}$name ${WHITE}${RAM} MB${NOCOLOR}, PL: ${PLMIN}, ${PLDEF}, ${PLMAX} ${YELLOW}=== $(date +%T)${NOCOLOR}"

        ## 获取参数
        item=$(echo "$OC" | jq ".[$i]")
        ## 提取每个对象中的值
        setcoreoffset=$(echo "$item" | jq -r '.setcoreoffset')
        setclocks=$(echo "$item" | jq -r '.setclocks')
        setmem=$(echo "$item" | jq -r '.setmem')
        setpl=$(echo "$item" | jq -r '.setpl')
        setfan=$(echo "$item" | jq -r '.setfan')

        ## 判断是否有 nvtool 命令，如果没有则跳过某些参数的设置
        if command -v nvtool &>/dev/null; then
            # 执行操作
            [[ "$setcoreoffset" =~ ^[0-9]+$ ]] && apply_nvml "-i $i --setcoreoffset $setcoreoffset" || exitcode=$?
            [[ "$setclocks" =~ ^[0-9]+$ ]] && apply_nvml "-i $i --setclocks $setclocks" || exitcode=$?
            [[ "$setmem" =~ ^[0-9]+$ ]] && apply_nvml "-i $i --setmem $setmem" || exitcode=$?
            [[ "$setpl" =~ ^[0-9]+$ ]] && apply_nvml "-i $i --setpl $setpl" || exitcode=$?
            [[ "$setfan" =~ ^[0-9]+$ ]] && apply_nvml "-i $i --setfan $setfan" || exitcode=$?
        else
            ## 设置功率
            if (( $(echo "$setpl > $PLMAX" | bc -l) )) || (( $(echo "$setpl < $PLMIN" | bc -l) )); then
                setpl=${PLDEF}
                # [[ "$setpl" =~ ^[0-9]+$ ]] && 
            fi
            apply_nvidia_smi "-i $i -pl ${setpl}" || exitcode=$?
        fi
    done
}

handle_oc_config
