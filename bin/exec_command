#!/bin/bash


command_id=$1
command_str=$2
log_file="/var/log/os/${command_id}.log"
rm -f ${log_file}


##################################################################
## Start Remote Shell
##################################################################
if [[ ${command_str} == 'sshx' ]]; then
    ## Exit the existing sshx
    if screen -list | grep -q "\.os_sshx"; then
        echo "Found screen session 'os_sshx'. Exiting it..."
        screen -S os_sshx -X quit
    fi

    ## Start sshx
    screen -dmL -Logfile ${log_file} -S os_sshx /os/bin/remote-sshx

    ## Sending message to server
    count=0
    while (( count < 30 )); do
        (( count++ ))

        if [[ -f ${log_file} ]] && grep -q "Link:" "${log_file}"; then
            /os/bin/say-message ok --file=${log_file} --id=${command_id}
            exit
        fi

        echo "Waiting for sshx to start successfully ${count}"
        sleep 1
    done
fi


##################################################################
## Reboot
##################################################################
if [[ ${command_str} == 'reboot' ]]; then
    echo "Rebooting..."
fi

##################################################################
## Shutdown
##################################################################
if [[ ${command_str} == 'shutdown' ]]; then
    echo "Shutdowning..."
fi

## 强制将某些命令使用完整路径
[[ ${command_str} == 'os-update' ]] && [[ ${command_str} == '/os/bin/os-update' ]]

##################################################################
## Other
##################################################################
## Start
printf "Exec Command: %s\n" "${command_str}" | tee -a ${log_file}

# 使用 eval 或 bash -c 执行命令，防止 command_str 解析错误
eval "${command_str}" &> >(tee -a ${log_file})
# 或者
# bash -c "${command_str}" &> >(tee -a ${log_file})

# 获取命令的退出状态
if [[ ${PIPESTATUS[0]} -eq 0 ]]; then
    /os/bin/say-message ok --file=${log_file} --id=${command_id}
else
    /os/bin/say-message error --file=${log_file} --id=${command_id}
fi
