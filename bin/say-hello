#!/usr/bin/env bash
## 如果发现退出码为1则停止运行
# # set -o errexit
# set -e
# ## 如果发现空的变量则停止运行
# # set -o nounset
# set -u

## 处理 hosts
sed -i '/^[[:space:]]*$/d' /etc/hosts
tr -cd '\11\12\15\40-\176' < /etc/hosts > /tmp/hosts_cleaned
mv /tmp/hosts_cleaned /etc/hosts


## 加载颜色文件
source /os/bin/colors
echoCyan "------------------------------------------------------------------ Try to say hello"

## 兼容 snap
if [ -d "/snap/bin" ] && [[ ":$PATH:" != *":/snap/bin:"* ]]; then
    export PATH="$PATH:/snap/bin"
fi

## 兼容 WSL 环境
if [[ -d /usr/lib/wsl/lib ]] && [[ ":$PATH:" != *":/usr/lib/wsl/lib:"* ]]; then
    export PATH="/usr/lib/wsl/lib:$PATH"
fi

##########################################################################################
## 检查是否为容器环境
##########################################################################################
in_container="false"
if [ -f /.dockerenv ] || grep -qE "docker|kubepods" /proc/1/cgroup; then
    echoCyan "Running inside Docker"
    in_container="true"
fi

## 是否为 WSL 环境
isWSL="false"
if [[ $(systemd-detect-virt) == "wsl" ]]; then  ## 兼容 WSL 环境
    isWSL="true"
fi

##########################################################################################
## 定义全局变量
##########################################################################################
rig_config="/os/config/rig.conf"

## 检查是否存在配置文件并加载
[[ ! -f ${rig_config} ]] && echo -e "No config $rig_config" && exit 1
source ${rig_config}

[[ -f /os/etc/VERSION ]] && source /os/etc/VERSION

## 创建必要的文件夹
mkdir -p /var/log/miner/custom/
mkdir -p /run/os/
mkdir -p  /run/hive/


##########################################################################################
## 检查参数
##########################################################################################
register="false"
tag_debug=0     # 是否开启 Debug 模式
for var in "$@"; do
    case "$var" in
        debug) tag_debug=1;;
        register) register="true";;
    esac
done

##########################################################################################
## 如果设置了永远使用内网 IP 作为主机名的话
##########################################################################################
if [[ -f /os/config/use_ip_as_hostname_allow ]]; then
    register="true"
    use_ip_as_hostname_allow="true"
fi

##########################################################################################
## 如果设置了删除 rig_id 的话
##########################################################################################
if [[ -f /os/config/del_rig_id_allow ]]; then
    register="true"
    rig_id=""
fi

##########################################################################################
## 显卡数量
##########################################################################################
gpu_count_amd=`/os/bin/gpu-count AMD | head -n 1`
gpu_count_nvidia=`/os/bin/gpu-count NVIDIA | head -n 1`
gpu_count_intel=`/os/bin/gpu-count INTEL | head -n 1`

# 确保数值变量都有默认值
[[ -z "$gpu_count_amd" ]] && gpu_count_amd=0
[[ -z "$gpu_count_nvidia" ]] && gpu_count_nvidia=0
[[ -z "$gpu_count_intel" ]] && gpu_count_intel=0

##########################################################################################
## 系统重启后延迟启动
##########################################################################################
## 启用显卡
## 启动时间
boot_time=$(( `date +%s` - `awk '{printf "%d", $1}' /proc/uptime` ))
## 当前时间
current_timestamp=$(date +%s)
time_difference=$((current_timestamp - boot_time))
if [[ $time_difference -lt 100 ]]; then
    if command -v nvidia-smi &> /dev/null; then
        [[ $(nvidia-smi -q | grep "Persistence Mode" | grep Disable | wc -l) -gt 0 ]] && nvidia-smi -pm 1
    fi
fi

## 根据GPU数量设置不同的等待时间：有GPU则等待30秒，无GPU则等待5秒
## 调试信息
echo "调试 - gpu_count_amd: [$gpu_count_amd]"
echo "调试 - gpu_count_nvidia: [$gpu_count_nvidia]"

if [[ $gpu_count_amd -gt 0 ]] || [[ $gpu_count_nvidia -gt 0 ]]; then
    BOOT_WAIT_TIME_SECONDS=30
else
    BOOT_WAIT_TIME_SECONDS=5
fi

## 当前时间
current_timestamp=$(date +%s)
time_difference=$((current_timestamp - boot_time))
if [[ $time_difference -lt $BOOT_WAIT_TIME_SECONDS ]]; then
    echo -e "System rebooted. Waiting $BOOT_WAIT_TIME_SECONDS seconds..."
    exit 0
fi

##########################################################################################
## 基本信息获取
##########################################################################################
## IP 信息
ips=( $(hostname -I) )
ips_json=`printf '%s\n' "${ips[@]}" | jq -R . | jq -s -c .`
net_interfaces=$(ip -o link | grep -vE 'LOOPBACK|POINTOPOINT|sit0|can0|docker|sonm|ifb|veth' | sed 's/altname.*//' | awk '{  printf "{\"iface\": \"%s\", \"mac\": \"%s\"}\n", substr($2, 1, length($2)-1), $(NF-2)  }' | jq -sc . 2>/dev/null || echo "[]")

## 调整内网 IP 获取方式
# lan_addresses=(`ip -o -f inet addr show | grep eth0 | awk '/scope global/ {print $4}'`)
# lan_gateway=`ip route | awk '/default/ && /eth0/ { print $3 }' | head -1`
DEFAULT_IFACE=$(ip route | awk '/default/ {print $5}' | head -1 || echo "eth0")
lan_addresses=($(ip -o -f inet addr show | grep $DEFAULT_IFACE | awk '/scope global/ {print $4}' || echo "0.0.0.0/0"))
lan_gateway=$(ip route | awk '/default/ && /'$DEFAULT_IFACE'/ { print $3 }' | head -1 || echo "0.0.0.0")


lan_dns=""
[[ -f /etc/resolv.conf ]] && lan_dns=`grep -m1 ^nameserver /etc/resolv.conf | awk '{print $2}'`
[[ -f /run/systemd/resolve/resolv.conf ]] && lan_dns=`grep -m1 ^nameserver /run/systemd/resolve/resolv.conf | awk '{print $2}'`

lan_dhcp=1
if [[ -f /etc/systemd/network/20-ethernet.network ]]
then
    grep -q '^DHCP=yes' /etc/systemd/network/20-ethernet.network && lan_dhcp=1 || lan_dhcp=0
fi
[[ $lan_dhcp == 1 ]] || lan_dhcp=0
lan_config="{\"dhcp\": $lan_dhcp, \"address\": \"${lan_addresses[@]}\", \"gateway\": \"$lan_gateway\", \"dns\": \"$lan_dns\"}"


## 系统主板信息
if [[ ${isWSL} == "true" ]]; then
    # WSL 环境下使用默认值
    system_uuid="WSL-$(hostname)-$(date +%s)"
    mb_product="WSL Virtual Machine"
    mb_manufacturer="Microsoft"
    mb_bios="WSL BIOS"
    mb_bios_date=""
else
    system_uuid=`cat /sys/class/dmi/id/product_uuid 2>/dev/null` || system_uuid=$(dmidecode -s system-uuid 2>/dev/null || echo "Unknown-$(hostname)")
    mb_product=$(cat /sys/class/dmi/id/board_name 2>/dev/null || dmidecode -s baseboard-product-name 2>/dev/null || echo "Unknown")
    mb_manufacturer=$(cat /sys/class/dmi/id/board_vendor 2>/dev/null || dmidecode -s baseboard-manufacturer 2>/dev/null || echo "Unknown")
    mb_bios=$(cat /sys/class/dmi/id/bios_version 2>/dev/null || dmidecode -s bios-version 2>/dev/null || echo "Unknown")
    mb_bios_date=`cat /sys/class/dmi/id/bios_date 2>/dev/null` && mb_bios="$mb_bios $mb_bios_date"
fi

## CPU 信息
## 强制使用英文输出，避免不同语言环境的问题
cpu_model=`LC_ALL=C lscpu | grep "Model name:" | sed 's/Model name:[ \t]*//g'`
cpu_cores=`LC_ALL=C lscpu | grep "^CPU(s):" | sed 's/CPU(s):[ \t]*//g'`
aes=`LC_ALL=C lscpu | grep "^Flags:.*aes" | wc -l`

# 容器或WSL中运行的话，需要执行不同的逻辑
if [[ ${in_container} == "true" || ${isWSL} == "true" ]]; then
    # 在容器或WSL中使用替代方法或设置默认值
    cpu_id=$(cat /proc/cpuinfo | grep "processor" | head -1 | awk '{print $3}' || echo "virtual-cpu")
else
    cpu_id=`dmidecode -t 4 | grep ID | sed 's/.*ID://;s/ //g' 2>/dev/null || echo "unknown-cpu-id"`
fi

## CPU 功耗
CPU_WATTS_JSON='[]'

if command -v ipmitool &>/dev/null; then
  RAW_OUTPUT=$(timeout 10 ipmitool sensor 2>/dev/null | grep -v Terminated)
  FILTERED=$(echo "$RAW_OUTPUT" | grep CPU_WATTS)

  CPU_WATTS_JSON=$(echo "$FILTERED" | awk '
  BEGIN { printf "[" }
  {
    if ($3 ~ /^[0-9]+(\.[0-9]+)?$/) {
      printf "%s%s", sep, $3
      sep=", "
    }
  }
  END { print "]" }
  ')
fi

# ## 磁盘信息 - 性能问题，暂时屏蔽
# if [[ ! -f /hive-config/.DISKLESS_AMD ]]; then
#     bootpart=`readlink -f /dev/block/$(mountpoint -d /)`
#     if [[ "$(echo $bootpart | grep -c nvme)" -gt 0 ]]; then
#         bootdisk=${bootpart::-2} #cutoff partnumber
#     else
#         bootdisk=${bootpart::-1} #cutoff partnumber
#     fi
#     disk_info=`parted -mls 2>/dev/null | grep "/dev/"`
#     # root disk first
#     disk_model=`echo "$disk_info" | grep -m1 "$bootdisk:" | awk -F ':' '{print $7 " " $2}'`
#     disk_model+=`echo "$disk_info" | grep -v "$bootdisk:" | awk -F ':' '{print ", " $7 " " $2}'`
# else
#     fsip=`cat /proc/cmdline | grep -o '\bhttproot=[^ ]*' | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+'`
#     disk_model="Diskless PXE from $fsip"
# fi


## 第一个网卡的 MAC 地址
[[ -e /sys/class/net/eth0/address ]] &&
	first_mac=`sed 's/://g' /sys/class/net/eth0/address` || #on some motherboards eth0 is disabled
	first_mac=$(echo $net_interfaces | jq -r .[0].mac | sed 's/://g') #just grab the first in list

## Ubuntu 版本
distro_ver=$(lsb_release -rs)
ubuntu_ver=$(echo $distro_ver | tr -d '.')

## Kernel 信息
kernel=$(uname --kernel-release )
[[ $(echo $kernel | cut -f3 -d. | cut -f1 -d- ) == "0" ]] && kernel+=" $(uname --kernel-version | cut -f1 -d. )"

# System pseudo unique number
uid=$(echo ${system_uuid}-${cpu_id}-${first_mac} | tr '[:upper:]' '[:lower:]' | sha1sum | awk '{print $1}')

## Nvidia 驱动版本
if command -v nvidia-smi >/dev/null 2>&1; then
    nvidia_version=$(nvidia-smi --help | head -n 1 | awk '{print $NF}' | sed 's/v//')
else
    nvidia_version=""
fi

## Hive 版本
if command -v nvtool >/dev/null 2>&1; then
    hive_version=$(dpkg -s hive | grep '^Version: ' | sed 's/Version: //' )
else
    hive_version=""
fi


## 获取 Nvidia 显卡列表
gpus="[]"
if [[ ${gpu_count_nvidia} -gt 0 ]]; then
    ## Hive 版本
    if command -v nvtool >/dev/null 2>&1; then
        gpus=$(gpu-check listjson NVIDIA 2>&1)
    else
        gpus=$(/os/bin/nvidia-json)
    fi
    
    ## 验证 gpus 是否为合法的 JSON
    echo "$gpus" | jq . >/dev/null 2>&1
    if [[ $? -ne 0 ]]; then
        ## 如果不是合法的 JSON，设置为默认值
        gpus="[]"
    fi

    ## 将 gpus 写入文件
    echo "$gpus" | tr -d '\t' > /run/os/gpu-detect.json
    echo "$gpus" | tr -d '\t' > /run/hive/gpu-detect.json
fi

## 获取 AMD 显卡列表
if [[ ${gpu_count_amd} -gt 0 ]]; then
    ## Hive 版本
    if command -v nvtool >/dev/null 2>&1; then
        # gpus=$(/hive/sbin/gpu-detect listjson 2>&1)
        gpus=$(cat /run/hive/gpu-detect.json)
    fi

    ## 验证 gpus 是否为合法的 JSON
    echo "$gpus" | jq . >/dev/null 2>&1
    if [[ $? -ne 0 ]]; then
        ## 如果不是合法的 JSON，设置为默认值
        gpus="[]"
    fi
fi

## 获取主机名
if [[ -z ${worker_name} ]] || [[ ${worker_name} == "" ]]; then
    worker_name=`hostname`
fi

## 如果设置了永远使用内网 IP 作为主机名的话
if [[ ${use_ip_as_hostname_allow} == 'true' ]]; then
    IP=$(ip route get 8.8.8.8 | awk '{for (i=1;i<=NF;i++) if ($i=="src") print $(i+1)}' | tr -d '\r\n ')
    ## 拼接 IP 地址
    IFS='.' read -r -a ip_parts <<< "$IP"
    for i in "${!ip_parts[@]}"; do
        ip_parts[$i]=$(printf "%03d" "${ip_parts[$i]}")
    done
    IP_STR=$(IFS=- ; echo "${ip_parts[*]}")
    worker_name="ip-${IP_STR}"
fi

## 获取 CPU 使用率
cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print 100 - $8}')

## 获取 CPU 负载
load_avg=$(awk '{print $1","$2","$3}' /proc/loadavg)

## 获取时区
timezone_cur=$(date +"%Z %z")

## 获取 CPU 温度
if [[ ${isWSL} == "true" ]]; then
    # WSL 环境下无法获取 CPU 温度，使用默认值
    cpu_temp="0"
else
    cpu_temp=$(/os/bin/cpu-temp)
fi

## 内存信息
swap_total=$(awk '/^SwapTotal:/ {print $2}' /proc/meminfo || echo 0)
swap_free=$(awk '/^SwapFree:/ {print $2}' /proc/meminfo || echo 0)
swap_used=$((swap_total - swap_free))
mem_total=$(grep MemTotal /proc/meminfo | awk '{print $2}' || echo 0)  # 单位：kB
mem_available=$(grep MemAvailable /proc/meminfo | awk '{print $2}' || echo 0)  # 单位：kB
[[ -z "$mem_available" || "$mem_available" == "" ]] && mem_available=0
mem_used=$((mem_total - mem_available))  # 计算已用内存，单位：kB



##########################################################################################
## 拼接发送请求
##########################################################################################
# 确保所有JSON变量都是有效的
[[ -z "$net_interfaces" || "$net_interfaces" == "null" ]] && net_interfaces="[]"
[[ -z "$gpus" || "$gpus" == "null" ]] && gpus="[]"
[[ -z "$ips_json" || "$ips_json" == "null" ]] && ips_json="[]"
[[ -z "$lan_config" || "$lan_config" == "null" ]] && lan_config="{}"

# 确保数值变量都有默认值
[[ -z "$gpu_count_amd" ]] && gpu_count_amd=0
[[ -z "$gpu_count_nvidia" ]] && gpu_count_nvidia=0
[[ -z "$gpu_count_intel" ]] && gpu_count_intel=0
[[ -z "$mem_available" ]] && mem_available=0

request=$(
    jq -n \
    --arg farm_hash "$farm_hash" \
    --arg uid "$uid" \
    --arg rig_name "$worker_name" \
    --arg rig_id "$rig_id" \
    --arg boot_time "$boot_time" \
    --argjson ip "$ips_json" \
    --argjson lan_config "$lan_config" \
    --argjson net_interfaces "$net_interfaces" \
    --arg gpu_count_amd "$gpu_count_amd" \
    --arg gpu_count_nvidia "$gpu_count_nvidia" \
    --arg gpu_count_intel "$gpu_count_intel" \
    --argjson gpus "$gpus" \
    --arg nvidia_version "$nvidia_version" \
    --arg manufacturer "$mb_manufacturer" --arg product "$mb_product" --arg bios "$mb_bios" --arg system_uuid "$system_uuid" \
    --arg model "$cpu_model" --arg cores "$cpu_cores" --arg aes "$aes" --arg cpu_id "$cpu_id" \
    --arg disk_model "$disk_model" \
    --arg distro_ver "$distro_ver" \
    --arg kernel "$kernel" \
    --arg hive_version "$hive_version" \
    --arg os_version "$OS_VERSION" \
    --arg cpu_usage "$cpu_usage" \
    --arg load_avg "$load_avg" \
    --arg timezone "$timezone_cur" \
    --arg cpu_temp "$cpu_temp" \
    --arg mem_total "$mem_total" \
    --arg mem_used "$mem_used" \
    --arg mem_available "$mem_available" \
    --arg swap_total "$swap_total" \
    --arg swap_used "$swap_used" \
    --arg swap_free "$swap_free" \
    --arg register "$register" \
    --argjson cpu_watts_json "$CPU_WATTS_JSON" \
    '{
        "method": "hello", "jsonrpc": "2.0", "id": 0,
        "params": {
            "farm_hash": $farm_hash, "uid": $uid, "rig_name": $rig_name, "rig_id": $rig_id,
            "boot_time": $boot_time, "ip": $ip, "lan_config": $lan_config, "net_interfaces": $net_interfaces,
            "gpu_count_amd": $gpu_count_amd, "gpu_count_nvidia": $gpu_count_nvidia, "gpu_count_intel": $gpu_count_intel, "gpus": $gpus,
            "mb": {"manufacturer": $manufacturer, "product": $product, "system_uuid": $system_uuid, "bios": $bios}, 
            "cpu": {"model": $model, "cores": $cores, "aes": $aes, "cpu_id": $cpu_id}, 
            "disk_model": $disk_model,
            "distro_ver": $distro_ver, "kernel": $kernel, "hive_version": $hive_version, "nvidia_version": $nvidia_version, "os_version": $os_version,
            "cpu_usage": $cpu_usage, "load_avg": $load_avg, "timezone": $timezone, "cpu_temp": $cpu_temp,
            "mem_total": $mem_total, "mem_used": $mem_used, "mem_available": $mem_available, 
            "swap_total": $swap_total, "swap_used": $swap_used, "swap_free": $swap_free, "register": $register,
            "cpu_watts_json": $cpu_watts_json
        }
    }'
)
[[ ${tag_debug} == 1 ]] && echo "Request: ${request}"

##########################################################################################
## 如果 request 为空，则不进行请求
##########################################################################################
if [[ -z "${request}" ]]; then
    echoRed "say-hello: Request is empty, exit"
    exit 0
fi

##########################################################################################
## 压缩并 base64 编码
##########################################################################################
# 判断 gzip 和 base64 是否可用，且支持需要的参数
if echo "test" | gzip -9 -c >/dev/null 2>&1 && echo "test" | base64 -w 0 >/dev/null 2>&1; then
    # 都可用，执行压缩并 base64 编码
    request_temp=$(echo ${request} | gzip -9 -c | base64 -w 0)
    request_gzip=$(
        jq -n \
        --arg request_temp "$request_temp" \
        '{
            "method": "hello", "jsonrpc": "2.0", "id": 0,
            "is_gzip": true,
            "request": $request_temp
        }'
    )
    request=$request_gzip
fi

##########################################################################################
# 判断 curl 是否支持 --compressed（通过检查是否支持 libz）
##########################################################################################
if curl -V 2>&1 | grep -q 'libz'; then
    curl_opts="--compressed"
else
    curl_opts=""
fi

##########################################################################################
## 发送请求 - 随机选择一个URL
##########################################################################################
## 随机选择使用哪个URL
random_number=$((RANDOM % 2))  # 生成0或1的随机数
exitcode=1  # 默认设置为失败状态

## 手动指定默认使用域名地址
random_number=0

## 根据随机数选择URL
if [[ $random_number -eq 0 ]]; then
    api="${server_url}/worker/report"
    url_type="server_url"
else
    api="${server_url_domain}/worker/report"
    url_type="server_url_domain"
fi

[[ ${tag_debug} == 1 ]] && echo "随机选择: $url_type, API = ${api}"

## 发送请求
response=`curl -X POST \
    -H "Content-Type: application/json" \
    --connect-timeout 7 --max-time 15 \
    -d "$request" \
    ${api} ${curl_opts}`
exitcode=$?
[[ ${tag_debug} == 1 ]] && echo "状态码: ${exitcode} 返回值: $response"


##########################################################################################
## 处理错误 - 如果第一个URL失败，尝试另一个URL
##########################################################################################
if [[ $exitcode -ne 0 ]]; then
    echoRed "ERROR: connection to API server failed $api, $response, Trying alternative URL"
    
    ## 如果第一个URL失败，尝试另一个URL
    if [[ "$url_type" == "server_url" ]]; then
        api="${server_url_domain}/worker/report"
        [[ ${tag_debug} == 1 ]] && echo "尝试备用URL: API = ${api}"
    else
        api="${server_url}/worker/report"
        [[ ${tag_debug} == 1 ]] && echo "尝试备用URL: API = ${api}"
    fi
    
    response=`curl -X POST \
        -H "Content-Type: application/json" \
        --connect-timeout 7 --max-time 15 \
        -d "$request" \
        ${api} ${curl_opts}`
    exitcode=$?
    [[ ${tag_debug} == 1 ]] && echo "状态码: ${exitcode} 返回值: $response"
fi

if [[ $exitcode -ne 0 ]]; then
    echoRed "ERROR: connection to all API servers failed, exit" 
    exit 1
fi


##########################################################################################
## 矿机是否被标记为删除
##########################################################################################
deleted=`echo "$response" | jq '.deleted' --raw-output`
if [[ ${deleted} == "true" ]]; then
    echoRed "The mining machine is marked for deletion and needs to stop its service."

    if [[ -f /etc/systemd/system/os-core.service ]]; then
        systemctl disable os-core.service
        systemctl stop os-core.service
        /os/bin/os stop_all
    fi

    if [[ -f /etc/supervisor/conf.d/say-hello.conf ]] || [[ -f /etc/supervisor/conf.d/say-stats.conf ]]; then
        rm -f /etc/supervisor/conf.d/say-hello.conf
        rm -f /etc/supervisor/conf.d/say-stats.conf
        supervisorctl reread
        supervisorctl update
        /os/bin/os stop_all
    fi

    exit 1
fi


##########################################################################################
## write rig.conf
##########################################################################################
config=`echo "$response" | jq '.result.config' --raw-output`
if [[ -z "$config" || "$config" == "null" ]]; then
    echoRed "no config field in response: ${config}"
    exit 1
fi


##########################################################################################
# AutoFan
##########################################################################################
auto_fan_config=`echo "$response" | jq '.result.auto_fan_config' --raw-output`
if [[ ! -z ${auto_fan_config} ]] && [[ ${auto_fan_config} != "" ]] && [[ ${auto_fan_config} != "null" ]]; then
    echo "auto_fan_config = ${auto_fan_config}"
    ## 如果存在目录，则覆盖文件
    if [[ -d /hive-config/ ]];  then
        echo "$auto_fan_config" > /hive-config/autofan.conf
    fi

    ## 如果命令存在，则启动他
    if [[ -f /hive/sbin/autofan ]]; then
        screen -wipe autofan >/dev/null
        session_count=`screen -ls autofan | grep -c ".autofan"`
        if [[ $session_count -eq 0 ]]; then
            systemctl restart hive.service
        fi
    fi
fi


##########################################################################################
# Wallet config
##########################################################################################
wallets_len=$(echo "$response" | jq '.result.wallet|length')
## 删除现有钱包
# rm -f /os/wallet/*

## 处理服务器返回数据
for ((i=0; i<wallets_len; i++)); do
    ## 钱包配置
    item=$(echo "$response" | jq ".result.wallet[$i].FLIGHT_CONF")
    ## 钱包名称
    wallet_name=$(echo "$response" | jq -r ".result.wallet[$i].FLIGHT_NAME")
    # wallet_name=$(echo ${item} | jq --raw-output | grep 'CUSTOM_NAME' | awk -F '=' '{print $2}' | tr -d '\"')

    ## 写入配置文件
    mkdir -p /tmp/wallet
    wallet_config="/tmp/wallet/${wallet_name}.conf"
    echo ${item} | jq '.' --raw-output > $wallet_config

    ## 替换配置文件中的主机名
    sed -i "s|%WORKER_NAME%|$(hostname)|g" "${wallet_config}"

    # ## AUTO_RUNNING
    # auto_running_file="/os/wallet/${wallet_name}_autorunning.sh"
    # AUTO_RUNNING=$(echo "$response" | jq ".result.wallet[$i].AUTO_RUNNING")
    # if [[ -n "${AUTO_RUNNING}" && "${AUTO_RUNNING}" != "\"\"" ]]; then
    #     echo "AUTO_RUNNING 不是空，需要写入文件"
    #     echo ${AUTO_RUNNING} | jq '.' --raw-output > $auto_running_file
    # fi
done
## 删除现有钱包 && 更新
rm -f /os/wallet/* && [ "$(ls -A /tmp/wallet/ 2>/dev/null)" ] && mv /tmp/wallet/*.conf /os/wallet/


##########################################################################################
## 临时使用 - 处理某些飞行表的兼容问题
##########################################################################################
## 处理 Apool 飞行表检测 CUSTOM_URL 的引号问题
for file in $(grep -rl "apoolminer" /os/wallet); do
    if grep -q "^CUSTOM_URL=" "$file"; then
        sed -i '/^CUSTOM_URL=/s/'\''/"/g' "$file"
        # echo "已更新文件: $file"
    fi
done

##########################################################################################
## 处理 rig.conf
##########################################################################################
# 写入配置并读取
[[ -e $rig_config ]] && old_config=$(< $rig_config) || old_config=
if [[ "$old_config" != "$config" ]]; then
    echoYellow "Writing Rig config"
    echo "$config" > $rig_config
    source $rig_config
fi


## Hostname
if [[ ! -z $worker_name ]]; then
	hostname=$worker_name
else
	hostname=worker #fallback hostname
fi
[[ $hostname =~ ^([0-9]+).* ]] && hostname="miner$worker_name" #echo "${BASH_REMATCH[1]}"

## 如果在容器中运行的话，跳过这些
if [[ "${in_container}" == "false" ]]; then
    sed -i '/^127.0.0.1/d' /etc/hosts
    if ! grep -q "127.0.0.1 $hostname" "/etc/hosts"; then
    {
        echo ""
        echo "127.0.0.1 $hostname"
        echo "127.0.0.1 localhost"
    } >> /etc/hosts

        ## WSL 环境下，需要使用 hostname 命令
        if [[ ${isWSL} == "true" ]]; then
            hostname "$hostname"
        else
            hostnamectl set-hostname "$hostname"
        fi
    fi
fi


## Timezone
if [[ ! -z $timezone ]] && [[ $timezone != "" ]]; then
    if [[ ${isWSL} == "true" ]]; then
        # WSL 环境下可能无法使用 timedatectl
        echo "WSL environment: skipping timezone change"
    else
        timedatectl set-timezone "$timezone"
    fi
fi


##########################################################################################
## Start || Stop Miner
##########################################################################################
/os/bin/os auto


##########################################################################################
## Exec Command
##########################################################################################
exec_command=`echo "$response" | jq '.result.exec_command' --raw-output`
if [[ ! -z ${exec_command} ]] && [[ ${exec_command} != "" ]]; then
    command_id=$(echo ${exec_command} | jq -r '.command_id')
    command_str=$(echo ${exec_command} | jq -r '.command_str')

    echo "command_id=${command_id}, command_str=${command_str}"
    /os/bin/exec_command "${command_id}" "${command_str}"
fi


##########################################################################################
## sshx 运行最大时长1小时
##########################################################################################
check_and_kill_screen() {
    local SCREEN_NAME="$1"
    local MAX_RUNTIME=3600  # 最大允许运行时间（秒）

    # 获取 screen 会话的 PID
    SCREEN_PID=$(screen -ls | grep "$SCREEN_NAME" | awk '{print $1}' | cut -d. -f1)

    # 检查是否找到 PID
    if [ -z "$SCREEN_PID" ]; then
        # echo "Error: Screen session '$SCREEN_NAME' not found."
        return 1
    fi

    # 获取进程的运行时长（格式为 [[dd-]hh:]mm:ss），并去除空格
    RUNTIME=$(ps -o etime= -p "$SCREEN_PID" | tr -d ' ')

    # 将运行时长转换为秒数
    SECONDS=0
    if [[ "$RUNTIME" =~ ^([0-9]+)-([0-9]+):([0-9]+):([0-9]+)$ ]]; then
        # 格式为 dd-hh:mm:ss
        SECONDS=$((10#${BASH_REMATCH[1]} * 86400 + 10#${BASH_REMATCH[2]} * 3600 + 10#${BASH_REMATCH[3]} * 60 + 10#${BASH_REMATCH[4]}))
    elif [[ "$RUNTIME" =~ ^([0-9]+):([0-9]+):([0-9]+)$ ]]; then
        # 格式为 hh:mm:ss
        SECONDS=$((10#${BASH_REMATCH[1]} * 3600 + 10#${BASH_REMATCH[2]} * 60 + 10#${BASH_REMATCH[3]}))
    elif [[ "$RUNTIME" =~ ^([0-9]+):([0-9]+)$ ]]; then
        # 格式为 mm:ss
        SECONDS=$((10#${BASH_REMATCH[1]} * 60 + 10#${BASH_REMATCH[2]}))
    elif [[ "$RUNTIME" =~ ^([0-9]+)$ ]]; then
        # 格式为 ss
        SECONDS=$((10#${BASH_REMATCH[1]}))
    else
        echo "Error: Unknown time format: $RUNTIME"
        return 1
    fi

    # # 输出运行秒数
    # echo "Screen session '$SCREEN_NAME' has been running for: $SECONDS seconds"

    # 如果运行时间超过 MAX_RUNTIME，则结束会话
    if [ "$SECONDS" -gt "$MAX_RUNTIME" ]; then
        echo "Screen session '$SCREEN_NAME' has exceeded the maximum runtime of $MAX_RUNTIME seconds. Killing it..."
        screen -S "$SCREEN_NAME" -X quit
        if [ $? -eq 0 ]; then
            echo "Screen session '$SCREEN_NAME' has been terminated."
        else
            echo "Error: Failed to terminate screen session '$SCREEN_NAME'."
            return 1
        fi
    fi
}
check_and_kill_screen "os_sshx"
check_and_kill_screen "ttyd_proxy"
