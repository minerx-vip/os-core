#!/bin/bash

source /os/bin/colors
mkdir -p /var/log/os/

check_say_service(){
    session_name=$1

    ## 杀死已挂起的
    queries=`screen -ls ${session_name} | grep -Po "\K[0-9]+.os_miner(-queryA)+"`
    if [[ ! -z $queries ]]; then
        # 等待并再次查询以防止杀死活动查询
        sleep 0.5
        queries2=`screen -ls ${session_name} | grep -Po "\K[0-9]+.os_miner(-queryA)+"`
        [[ "$queries" == "$queries2" ]] &&
            echo "Killing hanged miners screen session queries" &&
            pkill -f " -S ${session_name} "
    fi
    screen -wipe >/dev/null 2>&1

    ## 检查是否已经存在该会话，如果存在则结束
    if screen -ls | grep -q "${session_name}"; then
        echoCyan "结束旧的 ${session_name} 会话..."
        screen -S "${session_name}" -X quit > /dev/null 2>&1
        sleep 1
    fi

    ## 创建日志目录
    session_log_path="/var/log/os/${session_name}.log"
    mkdir -p /var/log/os/

    ## 检查是否为容器环境
    in_container="false"
    if [ -f /.dockerenv ] || grep -qE "docker|kubepods" /proc/1/cgroup; then
        echoCyan "Running inside Docker - ${session_name}"
        in_container="true"
    fi

    ## 判断是否要启动新的
    echoYellow "[${session_name}] is not running, it will start…"

    ## 删除过期日志
    rm -f "${session_log_path}"

    ## 启动一个空的会话
    screen -S "${session_name}" -dm -c /os/etc/screenrc.miner

    ## 启用日志功能
    screen -S "${session_name}" -X logfile "${session_log_path}"
    screen -S "${session_name}" -X log on

    ## 启动命令
    shell="while true; do /os/bin/${session_name}; sleep 10; done"
    screen -S "${session_name}" -X screen bash -c "${shell}"

    ## 检查是否启动成功
    sleep 2
    if screen -ls | grep -q "${session_name}"; then
        echoCyan "[${session_name}] is running"
    else
        echoRed "[${session_name}] failed to start"
    fi
}

## 入口
check_say_service say-hello
check_say_service say-stats
